{"version":3,"sources":["components/login.component.js","components/signup.component.js","components/edit.js","components/userindex.js","components/userdetails.js","components/delete.js","App.js","serviceWorker.js","mockServer/addRoutesToMockServer.js","mockServer/users/index.js","mockServer/index.js","index.js"],"names":["Login","state","email","password","fetch","method","body","JSON","stringify","this","then","res","localStorage","setItem","headers","map","authorization","className","type","placeholder","onChange","event","setState","target","value","onClick","login","logout","Component","Signup","id","first_name","last_name","jobs_count","active","slack_username","token","getItem","Authorization","job_count","signup","Edit","edit","Userindex","items","json","result","isLoaded","users","error","showuserindex","item","key","Userdetails","length","Delete","delete","App","to","exact","path","component","SignUp","Boolean","window","location","hostname","match","addRoutesToMockServer","mockServer","namespace","get","schema","request","jwt","requestHeaders","all","Response","message","post","parse","requestBody","user","find","params","idAppendedAttributes","create","patch","attributes","update","destroy","acceptedParam","isEqual","getUsers","userData","Server","models","Model","seeds","server","data","forEach","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.048bd9c7.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\n\r\nexport default class Login extends Component {\r\n\r\n\r\n\r\n\r\n\r\n    constructor()\r\n    {\r\n        super();\r\n        this.state={\r\n            email:null,\r\n            password:null,\r\n         \r\n        \r\n        }\r\n    }\r\n\r\n    logout(){\r\n        fetch(\"/api/v2/users/tokens\", {\r\n            method: \"DELETE\",\r\n            body:JSON.stringify(this.state)\r\n            \r\n        }).then(res=>localStorage.setItem(\"jwt\",res.headers.map.authorization));\r\n\r\n\r\n       \r\n \r\n            \r\n    }\r\n\r\n\r\n  \r\n    login(){\r\n        fetch(\"/api/v2/users/tokens\", {\r\n            method: \"POST\",\r\n            body:JSON.stringify(this.state)\r\n            \r\n        }).then(res=>localStorage.setItem(\"jwt\",res.headers.map.authorization));\r\n       \r\n \r\n            \r\n    }\r\n   \r\n\r\n\r\n    render() {\r\n\r\n\r\n        return (\r\n          <div className=\"form-group\">\r\n          <h3 >Login</h3>\r\n        \r\n          <div className=\"form-group\">\r\n                        <label>Email</label><br></br>\r\n                        <input type=\"email\" className=\"form-control\" placeholder=\"Enter email\" onChange={(event)=>(this.setState({email:event.target.value}))}/>\r\n                    </div>\r\n\r\n    \r\n         <div className=\"form-group\">\r\n                        <label>Password</label><br></br>\r\n                        <input type=\"password\"  className=\"form-control\" placeholder=\"Enter password\" onChange={(event)=>(this.setState({password:event.target.value}))}/>\r\n                    </div>\r\n           \r\n            <button type=\"submit\"  className=\"btn btn-dark btn-lg btn-block\"onClick={()=>{this.login()}} >Sign In</button>\r\n            <button type=\"submit\"  className=\"btn btn-dark btn-lg btn-block\"onClick={()=>{this.logout()}} >Logout</button> \r\n\r\n          <div>\r\n          </div>\r\n          </div>\r\n        \r\n        );\r\n    }\r\n}","import React, { Component } from \"react\";\r\n\r\n\r\nexport default class Signup extends Component {\r\n\r\n\r\n    constructor()\r\n    {\r\n        super();\r\n        this.state={\r\n            \r\n            id : null,\r\n            email: null,\r\n            first_name: null,\r\n            last_name: null,\r\n            jobs_count: null,\r\n            active: null,\r\n            slack_username: null\r\n       \r\n\r\n         \r\n        \r\n        }\r\n    }\r\n\r\n   \r\n    signup(){\r\n\r\n        const token = localStorage.getItem('jwt');\r\n\r\n        fetch(\"/api/v2/users\", {\r\n            headers: { Authorization: token, },\r\n            method: \"POST\",\r\n            body:JSON.stringify(this.state)\r\n            \r\n        })\r\n       \r\n \r\n            \r\n    }\r\n   \r\n\r\n\r\n    render() {\r\n        return (\r\n\r\n        \r\n            <div className=\"form-group\">    \r\n            <h3>User Creation</h3>\r\n        \r\n            <div className=\"form-group\">\r\n                        <label>Email</label><br></br>\r\n                        <input type=\"email\" className=\"form-control\" placeholder=\"Enter email\" onChange={(event)=>(this.setState({email:event.target.value}))}/>\r\n                    </div>\r\n    \r\n                    <div className=\"form-group\">\r\n                        <label>First Name</label><br></br>\r\n                        <input type=\"first_name\"  className=\"form-control\" placeholder=\"Enter First Name\" onChange={(event)=>(this.setState({first_name:event.target.value}))}/>\r\n                    </div>\r\n           \r\n                    <div className=\"mt-6\">\r\n                        <label>Last Name</label>\r\n                        <input type=\"last_name\"  className=\"form-control\" placeholder=\"Enter Last Name\" onChange={(event)=>(this.setState({last_name:event.target.value}))}/>\r\n                    </div>\r\n\r\n                    <div className=\"mt-6\">\r\n                        <label>User ID</label>\r\n                        <input type=\"id\"  className=\"form-control\" placeholder=\"Enter User id\" onChange={(event)=>(this.setState({id:event.target.value}))}/>\r\n                    </div>\r\n\r\n                    <div className=\"form-group\">\r\n                        <label>Job Count</label>\r\n                        <input type=\"job_count\"  className=\"form-control\" placeholder=\"Enter Job Count\" onChange={(event)=>(this.setState({job_count:event.target.value}))}/>\r\n                    </div>\r\n\r\n                    <div className=\"form-group\">\r\n                        <label>Active</label>\r\n                        <input type=\"active\"  className=\"form-control\" placeholder=\"Enter True or False\" onChange={(event)=>(this.setState({active:event.target.value}))}/>\r\n                    </div>\r\n\r\n                    <div className=\"form-group\">\r\n                        <label>Slack Username</label>\r\n                        <input type=\"slack_username\"  className=\"form-control\" placeholder=\"Enter Slack username\" onChange={(event)=>(this.setState({slack_username:event.target.value}))}/>\r\n                    </div>\r\n\r\n            <button type=\"submit\"className=\"btn btn-dark btn-lg btn-block\" onClick={()=>{this.signup()}} >Create User</button>\r\n\r\n          <div>\r\n          </div>\r\n          </div>\r\n        \r\n        );\r\n    }\r\n}","import React, { Component } from \"react\";\r\n\r\n\r\nexport default class Edit extends Component {\r\n\r\n\r\n\r\n    constructor()\r\n    {\r\n        super();\r\n        this.state={\r\n            id : null,\r\n            email: null,\r\n            first_name: null,\r\n            last_name: null,\r\n            jobs_count: null,\r\n            active: null,\r\n            slack_username: null\r\n       \r\n         \r\n        \r\n        }\r\n    }\r\n\r\n\r\n  \r\n    edit(){\r\n\r\n        const token = localStorage.getItem('jwt');\r\n\r\n\r\n        fetch(\"/api/v2/users/:id\", {\r\n            headers: { Authorization: token, },\r\n            method: \"PATCH\",\r\n            body:JSON.stringify(this.state)\r\n            \r\n        })\r\n \r\n            \r\n    }\r\n   \r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"form-group\">\r\n            <h3 >Edit User Details</h3>\r\n        \r\n      \r\n            <div className=\"form-group\">\r\n                        <label> User Id</label>\r\n                        <input type=\"id\"  className=\"form-control\" placeholder=\"Enter user ID\" onChange={(event)=>(this.setState({id:event.target.value}))}/>\r\n                    </div>\r\n\r\n                    <div className=\"form-group\">\r\n                        <label>Email</label><br></br>\r\n                        <input type=\"email\" className=\"form-control\" placeholder=\"Enter email\" onChange={(event)=>(this.setState({email:event.target.value}))}/>\r\n                    </div>\r\n    \r\n                    <div className=\"form-group\">\r\n                        <label>First Name</label>\r\n                        <input type=\"first_name\"  className=\"form-control\" placeholder=\"Enter First Name\" onChange={(event)=>(this.setState({first_name:event.target.value}))}/>\r\n                    </div>\r\n           \r\n                    <div className=\"form-group\">\r\n                        <label>Last Name</label>\r\n                        <input type=\"last_name\"  className=\"form-control\" placeholder=\"Enter Last Name\" onChange={(event)=>(this.setState({last_name:event.target.value}))}/>\r\n                    </div>\r\n\r\n\r\n                    <div className=\"form-group\">\r\n                        <label>Job Count</label>\r\n                        <input type=\"job_count\"  className=\"form-control\" placeholder=\"Enter Job Count\" onChange={(event)=>(this.setState({job_count:event.target.value}))}/>\r\n                    </div>\r\n\r\n                    <div className=\"form-group\">\r\n                        <label>Active</label>\r\n                        <input type=\"active\"  className=\"form-control\" placeholder=\"Enter True or False\" onChange={(event)=>(this.setState({active:event.target.value}))}/>\r\n                    </div>\r\n\r\n                    <div className=\"form-group\">\r\n                        <label>Slack Username</label>\r\n                        <input type=\"slack_username\"  className=\"form-control\" placeholder=\"Enter Slack username\" onChange={(event)=>(this.setState({slack_username:event.target.value}))}/>\r\n                    </div>\r\n            <button type=\"submit\"  className=\"btn btn-dark btn-lg btn-block\"onClick={()=>{this.edit()}} >Update Details</button>\r\n\r\n          <div>\r\n          </div>\r\n          </div>\r\n        \r\n        );\r\n    }\r\n}","import React, { Component } from \"react\";\r\n\r\n\r\n\r\nexport default class Userindex extends Component {\r\n\r\n\r\n\r\n    constructor()\r\n    {\r\n        super();\r\n        this.state={\r\n            email:null,\r\n            password:null,\r\n            items: [],\r\n         \r\n        \r\n        }\r\n    }\r\n\r\n  \r\n    showuserindex(){\r\n\r\n\r\n        const token = localStorage.getItem('jwt');\r\n\r\n        fetch(\"/api/v2/users\", {\r\n            headers: { Authorization: token, },\r\n            method: \"GET\",\r\n        })\r\n        .then(res => res.json())\r\n        .then(\r\n          (result) => {\r\n            this.setState({\r\n              isLoaded: true,\r\n              items: result.users\r\n              \r\n            });\r\n          },\r\n          // Note: it's important to handle errors here\r\n          // instead of a catch() block so that we don't swallow\r\n          // exceptions from actual bugs in components.\r\n          (error) => {\r\n            this.setState({\r\n              isLoaded: true,\r\n              error\r\n            });\r\n          }\r\n        )\r\n    \r\n            \r\n    }\r\n   \r\n\r\n\r\n\r\n\r\n    render() {\r\n\r\n        const { items } = this.state;\r\n        const token = localStorage.getItem('jwt');\r\n\r\n\r\n        if (token==='undefined'){\r\n          return(\r\n            <div>\"PLease Login!</div>\r\n          )\r\n        }\r\n        else{\r\n\r\n        return (\r\n          <div className=\"form-group\">\r\n          <h3>All Users</h3>\r\n\r\n   \r\n            <button type=\"submit\" className=\"btn btn-dark btn-lg btn-block\" onClick={()=>{this.showuserindex()}} >Show User Index</button><br></br><br></br>\r\n            <ul>\r\n            {items.map(item => (\r\n              <li key={item.id}>\r\n                Email: {item.email}<br></br> User ID: {item.id}<br></br> Jobs Count: {item.jobs_count}<br></br> Active state:{item.active}\r\n              </li>\r\n            ))}\r\n          </ul>         \r\n       \r\n          </div>\r\n        \r\n          \r\n            \r\n        );\r\n            }\r\n    }\r\n  }\r\n","import React, { Component} from \"react\";\r\n\r\n\r\n\r\nexport default class Userdetails extends Component {\r\n\r\n\r\n\r\n\r\n    constructor()\r\n    {\r\n        super();\r\n        this.state={\r\n            \r\n            id:null,\r\n            items: [],\r\n         \r\n        \r\n        }\r\n    }\r\n\r\n\r\n            \r\n\r\n  \r\n    showuserindex(){\r\n\r\n      const token = localStorage.getItem('jwt');\r\n\r\n\r\n      fetch(\"/api/v2/users/:id\", {\r\n          headers: { Authorization: token, },\r\n          method: \"POST\",\r\n          body:JSON.stringify(this.state)\r\n          \r\n      })\r\n      .then(res => res.json())\r\n      .then(\r\n        (result) => {\r\n          this.setState({\r\n            isLoaded: true,\r\n            items: result.users\r\n            \r\n            \r\n          });\r\n\r\n        },\r\n        // Note: it's important to handle errors here\r\n        // instead of a catch() block so that we don't swallow\r\n        // exceptions from actual bugs in components.\r\n        (error) => {\r\n          this.setState({\r\n            isLoaded: true,\r\n            \r\n            error\r\n          });\r\n        }\r\n      )\r\n        \r\n            \r\n    }\r\n   \r\n\r\n\r\n    render() {\r\n\r\n  \r\n\r\n\r\n const list =this.state.items;\r\n\r\n\r\n\r\n\r\n if ( list.length===0 )\r\n\r\n{             return(\r\n\r\n  <div className=\"form-group\">\r\n  <h3 >Show User Details</h3>\r\n\r\n<div className=\"form-group\">\r\n              <label> User ID</label><br></br>\r\n              <input type=\"id\" className=\"form-control\" placeholder=\"Enter user id\" onChange={(event)=>(this.setState({id:event.target.value}))}/>\r\n          </div>\r\n  <button type=\"submit\" className=\"btn btn-dark btn-lg btn-block\" onClick={()=>{this.showuserindex()}} >Get user details</button>\r\n\r\n  </div>\r\n)     }\r\n\r\n\r\n\r\nelse {\r\n\r\n\r\n           \r\n        return (\r\n\r\n\r\n          <div className=\"form-group\">\r\n\r\n\r\n       \r\n       <h1 >User Details</h1>\r\n\r\n            <p>\r\n          User ID :<br></br> {this.state.items.id}<br></br>\r\n          Email:<br></br>{this.state.items.email}<br></br>\r\n          First Name:<br></br>{this.state.items.first_name}<br></br>\r\n          Last Name:<br></br>{this.state.items.last_name}<br></br>\r\n          Active:<br></br>{this.state.items.active}<br></br>\r\n          Job Count: <br></br>{this.state.items.jobs_count}<br></br>\r\n          Slack Username:<br></br> {this.state.items.slack_username}\r\n        \r\n\r\n            </p>\r\n\r\n          </div>\r\n          \r\n            \r\n        );}\r\n\r\n        \r\n        }\r\n       \r\n            \r\n    }\r\n\r\n","import React, { Component } from \"react\";\r\n\r\n\r\nexport default class Delete extends Component {\r\n\r\n\r\n\r\n\r\n\r\n    constructor()\r\n    {\r\n        super();\r\n        this.state={\r\n            id : null,\r\n            email: null,\r\n            first_name: null,\r\n            last_name: null,\r\n            jobs_count: null,\r\n            active: null,\r\n            slack_username: null\r\n       \r\n         \r\n        \r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n  \r\n    delete(){\r\n\r\n        const token = localStorage.getItem('jwt');\r\n\r\n\r\n        fetch(\"/api/v2/users/:id\", {\r\n            headers: { Authorization: token, },\r\n            method: \"DELETE\",\r\n            body:JSON.stringify(this.state)\r\n            \r\n        })\r\n \r\n            \r\n    }\r\n   \r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"form-group\">\r\n            <h3 >Delete User</h3>\r\n        \r\n      \r\n            <div className=\"form-group\">\r\n                        <label> User Id</label><br></br>\r\n                        <input type=\"id\"  className=\"form-control\" placeholder=\"Enter user ID\" onChange={(event)=>(this.setState({id:event.target.value}))}/>\r\n                    </div><br></br>\r\n\r\n                    \r\n            <button type=\"submit\"  className=\"btn btn-dark btn-lg btn-block\"onClick={()=>{this.delete()}} >Delete User</button><br></br><br></br>\r\n\r\n          <div>\r\n          </div>\r\n          </div>\r\n        \r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\r\nimport './App.css';\r\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\r\n\r\nimport Login from \"./components/login.component\";\r\nimport SignUp from \"./components/signup.component\";\r\nimport Edit from \"./components/edit\";\r\nimport Userindex from \"./components/userindex\";\r\nimport Userdetails from \"./components/userdetails\";\r\nimport Delete from \"./components/delete\";\r\n\r\n\r\n\r\nfunction App() {\r\n  return (<Router>\r\n    <div className=\"App\">\r\n      <nav className=\"navbar navbar-expand-lg navbar-light fixed-top\">\r\n        <div className=\"container\">\r\n          <Link className=\"navbar-brand\" to={\"/sign-in\"}>Skand Frontend Tasks!</Link>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarTogglerDemo02\">\r\n            <ul className=\"navbar-nav ml-auto\">\r\n              <li className=\"nav-item\">\r\n                <Link className=\"nav-link\" to={\"/sign-in\"}>Sign in</Link>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <Link className=\"nav-link\" to={\"/sign-up\"}>User Creation</Link>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <Link className=\"nav-link\" to={\"/edit\"}>Edit</Link>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <Link className=\"nav-link\" to={\"/delete\"}>Delete</Link>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <Link className=\"nav-link\" to={\"/userindex\"}>User Index</Link>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <Link className=\"nav-link\" to={\"/userdetails\"}>User Details</Link>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n\r\n      <div className=\"outer\">\r\n        <div className=\"inner\">\r\n          <Switch>\r\n            <Route exact path='/' component={Login} />\r\n            <Route path=\"/sign-in\" component={Login} />\r\n            <Route path=\"/sign-up\" component={SignUp} />\r\n            <Route exact path='/userdetails' component={Userdetails} />\r\n            <Route path=\"/userindex\" component={Userindex} />\r\n            <Route path=\"/delete\" component={Delete} />\r\n            <Route path=\"/edit\" component={Edit} />\r\n\r\n\r\n          </Switch>\r\n        </div>\r\n      </div>\r\n    </div></Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { Response } from 'miragejs';\r\nimport isEqual from 'lodash/isEqual';\r\n\r\nconst addRoutesToMockServer = (mockServer) => {\r\n  // eslint-disable-next-line no-param-reassign\r\n  mockServer.namespace = '/api/v2';\r\n\r\n\r\n\r\n  // Users CRUD\r\n  mockServer.get('/users', (schema, request) => {\r\n    const jwt = request.requestHeaders.authorization;\r\n    if (jwt === 'undefined' || !jwt) {\r\n      return new Response(401, {}, { message: 'Please Login' });\r\n    }\r\n    return schema.users.all();\r\n  });\r\n\r\n  mockServer.post('/users/:id', (schema, request) => {\r\n    const jwt = request.requestHeaders.authorization;\r\n\r\n\r\n    if (jwt === 'undefined' || !jwt) {\r\n      return new Response(401, {}, { message: 'Please Login' });\r\n    }\r\n  \r\n    const attributes = JSON.parse(request.requestBody);\r\n    const id = attributes.id;\r\n    const user = schema.users.find(id);\r\n    if (!user) {\r\n      return new Response(500, {}, { message: `No user with id: ${request.params.id} found` });\r\n    }\r\n    return user;\r\n  });\r\n  mockServer.post('/users', (schema, request) => {\r\n    const jwt = request.requestHeaders.authorization;\r\n    if (jwt === 'undefined' || !jwt) {\r\n      return new Response(401, {}, { message: 'Please Login' });\r\n    }\r\n\r\n    const attributes = JSON.parse(request.requestBody);\r\n    const idAppendedAttributes = { ...attributes};\r\n    return schema.users.create(idAppendedAttributes);\r\n  });\r\n  mockServer.patch('/users/:id', (schema, request) => {\r\n    const jwt = request.requestHeaders.authorization;\r\n    if (jwt === 'undefined' || !jwt) {\r\n      return new Response(401, {}, { message: 'Please Login' });\r\n    }\r\n\r\n    const attributes = JSON.parse(request.requestBody);\r\n    const id = attributes.id;\r\n\r\n    const user = schema.users.find(id);\r\n    if (!user) {\r\n      return new Response(500, {}, { message: `No user with id: ${request.params.id} found` });\r\n    }\r\n\r\n    return user.update(attributes);\r\n  });\r\n  mockServer.delete('/users/:id', (schema, request) => {\r\n    const jwt = request.requestHeaders.authorization;\r\n    const attributes = JSON.parse(request.requestBody);\r\n    const id = attributes.id;\r\n    const user = schema.users.find(id);\r\n    if (jwt === 'undefined' || !jwt) {\r\n      return new Response(401, {}, { message: 'Please Login' });\r\n    }\r\n\r\n    if (!user) {\r\n      return new Response(500, {}, { message: `No user with id: ${request.params.id} found` });\r\n    }\r\n\r\n    user.destroy();\r\n    return new Response(200, {}, {});\r\n  });\r\n\r\n  // Session Login / Logout\r\n  mockServer.post('/users/tokens', (schema, request) => {\r\n    const acceptedParam = { email: 'test@skand.io', password: 'password' };\r\n    const requestBody = JSON.parse(request.requestBody);\r\n    const headers = { Authorization: '123abc456def789ghi' };\r\n    const errorMessage = { message: 'Email does not match the password' };\r\n    const responseData = 'ok';\r\n\r\n    const expectedParamMatchesRequest = !!acceptedParam && isEqual(requestBody, acceptedParam);\r\n\r\n    if (!expectedParamMatchesRequest) {\r\n      return new Response(401, {}, errorMessage);\r\n    }\r\n\r\n    return new Response(200, headers, responseData);\r\n  });\r\n\r\n  mockServer.delete('/users/tokens', () => {\r\n    const headers = { 'Content-Type': 'application/json; charset=utf-8' };\r\n    const responseData = {};\r\n\r\n    return new Response(200, headers, responseData);\r\n  });\r\n};\r\n\r\nexport default addRoutesToMockServer;\r\n","/* eslint-disable import/prefer-default-export */\r\nimport userData from './userData.json';\r\n\r\nconst getUsers = JSON.parse(JSON.stringify(userData));\r\n\r\nexport default getUsers;\r\n","import { Server, Model } from 'miragejs';\r\nimport addRoutesToMockServer from './addRoutesToMockServer';\r\nimport getUsers from './users';\r\n\r\nconst mockServer = new Server({\r\n  models: {\r\n    users: Model,\r\n  },\r\n\r\n  seeds(server) {\r\n    getUsers.data.forEach((user) => {\r\n      server.schema.users.create(user);\r\n    });\r\n  },\r\n});\r\n\r\naddRoutesToMockServer(mockServer);\r\n\r\nexport default mockServer;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport './mockServer';\r\n\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <App />\r\n    </BrowserRouter>,\r\n    document.getElementById(\"root\")\r\n);\r\n\r\nserviceWorker.unregister();"],"sourceRoot":""}